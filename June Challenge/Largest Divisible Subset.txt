Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements
 in this subset satisfies:

Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:

Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)
Example 2:

Input: [1,2,4,8]
Output: [1,2,4,8]

SOLUTION:-

class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
      ArrayList<Integer> list=new ArrayList<>();
      if(nums.length==0)
        return list;
      int n=nums.length;
      int dp[]=new int[n];
      int prev[]=new int[n];
      Arrays.sort(nums);
      Arrays.fill(dp,1);
      Arrays.fill(prev,-1);
      int max_indx=0;
       for(int i=1;i<n;i++)
       {
         for(int j=0;j<i;j++)
         {
           if(nums[i]%nums[j]==0 && dp[i]<dp[j]+1)
           {
             prev[i]=j;
             dp[i]=dp[j]+1;
           }
         }
         if(dp[i]>dp[max_indx])
           max_indx=i;
       }
      
      int k=max_indx;
      while(k>=0)
      {
        list.add(nums[k]);
        k=prev[k];
      }
      
      return list;
        
    }
}