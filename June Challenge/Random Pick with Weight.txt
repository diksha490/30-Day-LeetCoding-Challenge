Given an array w of positive integers, where w[i] describes the weight of index i(0-indexed), write a function pickIndex which randomly picks an index in proportion to its weight.

For example, given an input list of values w = [2, 8], when we pick up a number out of it, the chance is that 8 times out of 10 we should pick the number 1 as the answer since it's the second element of the array (w[1] = 8).

 

Example 1:
Input
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
Output
[null,1,1,1,1,0]

Explanation
Solution solution = new Solution([1, 3]);
solution.pickIndex(); // return 1. It's returning the second element (index = 1) that has probability of 3/4.
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 0. It's returning the first element (index = 0) that has probability of 1/4.

Since this is a randomization problem, multiple answers are allowed so the following outputs can be considered correct :
[null,1,1,1,1,0]
[null,1,1,1,1,1]
[null,1,1,1,0,0]
[null,1,1,1,0,1]
[null,1,0,1,0,0]
......
and so on.

SOLUTION:-
class Solution {
    int cf[];
    Random random;
    public Solution(int[] w) {
      random=new Random();
      cf=new int[w.length];
      cf[0]=w[0];
      for(int i=1;i<w.length;i++)
        cf[i]=cf[i-1]+w[i];
        
    }
    
    public int pickIndex() {
      int n=cf.length;
      int target=random.nextInt(cf[n-1])+1;
      for(int i=0;i<n;i++)
      {
        if(cf[i]<target)
          continue;
        else
          return i;
      }
      return 0;
        
    }
}
