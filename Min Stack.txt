Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example 1:
Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

SOLUTION:-

class MinStack {

    /** initialize your data structure here. */
    Stack<Integer> stk1=new Stack<Integer>();
    Stack<Integer> stk2=new Stack<Integer>();
    public MinStack() {
        
    }
    
    public void push(int x) {
        if(stk1.isEmpty())
        {
            stk1.push(x);
            stk2.push(x);
        }
        else
        {
            if(x<=stk2.peek())
            {
                stk2.push(x);
            }
            stk1.push(x);
        }
            
        
    }
    
    public void pop() { 
        if(!stk1.isEmpty())
        {
            int y=stk1.pop();
            if(y==stk2.peek())
                 stk2.pop();
        }
    }
    
    public int top() {
            if(!stk1.isEmpty())
                 return stk1.peek();
          
        return -1;
        
    }
    
    public int getMin() {
         if(!stk2.isEmpty())
              return stk2.peek();
        
        return -1;
        
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */