Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and  any descendant 
of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then
 traverses node.left, then traverses node.right.)

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

SOLUTION:-
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        return construct(preorder,0,preorder.length-1);
        
    }
    public TreeNode construct(int preorder[],int start,int end)
    {
        if(start>end)
            return null;
        TreeNode root=new TreeNode(preorder[start]);
        int i;
        for(i=start;i<=end;i++)
        {
            if(preorder[i]>root.val)
                break;
        }
        root.left=construct(preorder,start+1,i-1);
        root.right=construct(preorder,i,end);
        return root;
    }
}


