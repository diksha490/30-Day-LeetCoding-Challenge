Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

SOLUTION:-

class Solution {
    public int search(int[] nums, int target) {
        int result=searchElement(nums,0,nums.length-1,target);
        return result;
        
    }
    
    public int searchElement(int nums[],int low,int high,int target)
    {
        if(low>high)
            return -1;
        int mid=(low+high)/2;
        if(nums[mid]==target)
            return mid;
        
        if(nums[low]<=nums[mid])
        {
            if(target>=nums[low] && target<=nums[mid])
                return searchElement(nums,low,mid-1,target);
            return searchElement(nums,mid+1,high,target);
        }
        if(target>=nums[mid] && target<=nums[high])
            return searchElement(nums,mid+1,high,target);
        return searchElement(nums,low,mid-1,target);
    }
}