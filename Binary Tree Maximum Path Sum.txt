Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child 
connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42

SOLUTION:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private int result =Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        int val = helper(root);
        return Math.max(val,result);

    }
    private int helper(TreeNode node){
    if(node == null)
        return 0;
     int leftval=helper(node.left);
     int rightval=helper(node.right);
     int max1=Math.max(leftval+node.val,rightval+node.val);
     result=Math.max(result,Math.max(max1,leftval+rightval+node.val));
        
     return Math.max(max1,node.val);   
   
          
        
    }
}