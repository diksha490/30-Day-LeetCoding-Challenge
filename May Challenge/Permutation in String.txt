Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1.
In other words, one of the first string's permutations is the substring of the second string.

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False

SOLUTION:-
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1.length()>s2.length())
            return false;
        int freq1[]=new int[26];
        for(int i=0;i<s1.length();i++)
        {
            freq1[s1.charAt(i)-'a']++;
        }
        for(int i=0;i<=s2.length()-s1.length();i++)
        {
            String temp=s2.substring(i,i+s1.length());
            int freq2[]=new int[26];
            for(int j=0;j<temp.length();j++)
                freq2[temp.charAt(j)-'a']++;
            if(Arrays.equals(freq1,freq2))
                return true;
        }
       return false; 
        
    }

}