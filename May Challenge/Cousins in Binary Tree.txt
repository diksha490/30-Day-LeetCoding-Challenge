In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 Example 1:
Input: root = [1,2,3,4], x = 4, y = 3
Output: false

Example 2:
Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true

Example 3:
Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false

SOLUTION :-
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        int xdepth=findDepth(root,x,0);
        int ydepth=findDepth(root,y,0);
        TreeNode xparent=findParent(root,x,null);
        TreeNode yparent=findParent(root,y,null);
        
        return ((xdepth==ydepth) && (xparent!=yparent));
        
    }
    int findDepth(TreeNode root,int num,int depth)
    {
        if(root==null)
            return 0;
        if(root.val==num)
            return depth;
        int result=findDepth(root.left,num,depth+1);
        if(result!=0)
            return result;
        return findDepth(root.right,num,depth+1);
    }
    TreeNode findParent(TreeNode root,int num,TreeNode parent)
    {
        if(root==null)
            return null;
        if(root.val==num)
            return parent;
        TreeNode result=findParent(root.left,num,root);
        if(result!=null)
            return result;
        return findParent(root.right,num,root);
        
        
    }
}