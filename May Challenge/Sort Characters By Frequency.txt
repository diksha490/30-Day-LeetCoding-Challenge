Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

SOLUTION:-
class Solution {
    public String frequencySort(String s) {
       HashMap<Character,Integer> map=new HashMap<>();
       for(char c:s.toCharArray())
       {
           int count=map.getOrDefault(c,0);
           map.put(c,count+1);
       }
        ArrayList<Character> arr=new ArrayList<>();
        for(int i=0;i<s.length();i++)
            arr.add(s.charAt(i));
        Collections.sort(arr,(a,b)->map.get(b)-map.get(a));
        StringBuilder sb=new StringBuilder("");
        for(int i=0;i<arr.size();i++)
            sb.append(arr.get(i));
        
        return sb.toString();
    }
}