You are given a sorted array consisting of only integers where every element appears exactly twice,
 except for one element which appears exactly once. Find this single element that appears only once.

Follow up: Your solution should run in O(log n) time and O(1) space.
Example 1:
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:
Input: nums = [3,3,7,7,10,11,11]
Output: 10

SOLUTION :-
class Solution {
    public int singleNonDuplicate(int[] nums) {
       int n=nums.length;
       int start=0;
       int end=n-1;
       while(start<end)
       {
           int mid=(start+end)/2;
           if((mid%2==0 && mid+1<n && nums[mid]==nums[mid+1]) || (mid%2==1 && mid-1>=0 && nums[mid]==nums[mid-1]))
               start=mid+1;
           else
               end=mid;
           if(mid-1>=0 && mid+1<n && nums[mid]!=nums[mid+1] && nums[mid]!=nums[mid-1])
               return nums[mid];
       }
        return nums[start];
        
    }
}